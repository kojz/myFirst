<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	   		http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
	   		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.1.xsd
     		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
	   		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
			http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd 
			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd">
			

	<context:property-placeholder location="classpath:config/init.properties"/>

	<!-- 激活spring的注解. -->
  	<context:annotation-config /> 

	<!-- 扫描注解组件并且自动的注入spring beans中. 
	例如,他会扫描@Controller 和@Service下的文件.所以确保此base-package设置正确. -->
 	<context:component-scan base-package="org.liukai.tutorial" /> 

	<!-- 配置注解驱动的Spring MVC Controller 的编程模型.注:次标签只在 Servlet MVC工作! -->
 	<mvc:annotation-driven /> 
	
	<!-- dataSource -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"  init-method="init" destroy-method="close">
	  <!-- 基本属性 url、user、password -->
        <property name="driverClassName" value="${jdbc.driverClassName}"></property>
        <property name="url" value="${jdbc.url}"></property>
        <property name="username" value="${jdbc.username}"></property>
        <property name="password" value="${jdbc.password}"></property>

       <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${jdbc.initialSize}" />
        <property name="minIdle" value="${jdbc.minIdle}" />
        <property name="maxActive" value="${jdbc.maxActive}" />
       <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000" />
       <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />
       <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />
        <property name="validationQuery" value="SELECT 'x'" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize"  value="20" />
       <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="wall,stat" />

    </bean>	
	
	<!-- transaction manager, use JtaTransactionManager for global tx -->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

    <!-- define the SqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="configLocation" value="classpath:config/mapper/mybatis-config.xml" />
        <property name="mapperLocations" value="classpath:config/mapper/*Mapper.xml"></property>
        <property name="typeAliasesPackage" value="org.liukai.tutorial.domain" />
    </bean>
    
    <!-- scan for mappers and let them be autowired -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"> 
       <property name="basePackage" value="org.liukai.tutorial.dao"/>
    </bean> 
    
 	<!-- 声明事务通知   -->
    <tx:advice id="txAdvice" transaction-manager="txManager">  
        <tx:attributes>  
            <!-- propagation="REQUIRED"代表支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。 -->  
            <tx:method name="process*" propagation="REQUIRED"  rollback-for="Exception"/>  
        </tx:attributes>  
    </tx:advice>  	
    
   <!--  声明式事务管理:定义切面   -->
    <aop:config>  
   <!-- 定义切入点 expression="execution(* org.liukai.tutorial.service.*.*(..))"   其中第一个*代表返回值，第二*代表service下子包，第三个*代表方法名，“（..）”代表方法参数。   
                        注意第一个*后面要打一个空格，要不然会报表达式错误  --> 
        <aop:pointcut expression="execution(* org.liukai.tutorial.service.*.*(..))"  id="serviceMethod" />  
        <!-- 把切入点和事务通知联系起来   -->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethod"/>  
    </aop:config>  	
 
</beans>
